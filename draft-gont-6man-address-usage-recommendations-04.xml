<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc strict="no" ?>

<rfc 
	ipr="trust200902"
	category="info"
	docName="draft-gont-6man-address-usage-recommendations-04">
  <front>
    <title abbrev="IPv6 Address Usage">Problem Statement Regarding IPv6 Address Usage</title>

    <author fullname="Fernando Gont" initials="F." surname="Gont">
      <organization abbrev="SI6 Networks / UTN-FRH">SI6 Networks / UTN-FRH</organization>

      <address>
        <postal>
          <street>Evaristo Carriego 2644</street>
          <code>1706</code>
          <city>Haedo</city>
          <region>Provincia de Buenos Aires</region>
          <country>Argentina</country>
        </postal>

        <phone>+54 11 4650 8472</phone>
        <email>fgont@si6networks.com</email>
        <uri>http://www.si6networks.com</uri>
      </address>
    </author>


    <author fullname="Guillermo Gont" initials="G.G." surname="Gont">
      <!-- abbrev not needed but can be used for the header
         if the full organization name is too long -->

      <organization abbrev="SI6 Networks">SI6 Networks</organization>

      <address>
        <postal>
          <!-- I've omitted my street address here -->

          <street>Evaristo Carriego 2644</street>

          <code>1706</code>

          <city>Haedo</city>

          <region>Provincia de Buenos Aires</region>

          <country>Argentina</country>
        </postal>

        <phone>+54 11 4650 8472</phone>

        <email>ggont@si6networks.com</email>

        <uri>https://www.si6networks.com</uri>
      </address>
    </author>	

    <author fullname="Madeleine Garcia Corbo" initials="M." surname="Garcia Corbo">
      <organization abbrev="SITRANS">Servicios de Información del Transporte</organization>

      <address>
        <postal>
          <street>Neptuno 358</street>
          <code>10400</code>
          <city>Havana City</city>
 <!--         <region>Provincia de Buenos Aires</region> -->
          <country>Cuba</country>
        </postal>

<!--        <phone>+54 11 4650 8472</phone>  -->
        <email>madelen.garcia16@gmail.com</email>
<!--        <uri>http://www.si6networks.com</uri>  -->
      </address>
    </author>

   <author fullname="Christian Huitema" initials="C." surname="Huitema">
      <organization>Private Octopus Inc.</organization>
      <address>
        <postal>
          <street></street>
          <city>Friday Harbor</city>
          <code>98250</code>
          <region>WA</region>
          <country>U.S.A.</country>
        </postal>
        <email>huitema@huitema.net</email>
        <uri>http://privateoctopus.com</uri>
      </address>
    </author>

    <date/>

    <area>Internet</area>
    <workgroup>IPv6 maintenance Working Group (6man)</workgroup>



    <abstract>
    <t>
This document analyzes the security and privacy implications of IPv6 addresses 
based on a number of properties (such as address scope, stability, and usage type), and identifies gaps that currently prevent systems and applications from leveraging the increased flexibility and availability of IPv6 addresses. 
</t>
    </abstract>
  </front>

  <middle>
  
<section title="Introduction" anchor="intro">
<t>IPv6 addresses may differ in a number of properties, such as address scope (e.g. link-local vs. global), stability (e.g. stable addresses vs. temporary addresses), and intended usage type (outgoing communications vs. incomming communications). While often overlooked, these properties have impact on areas such as security, privacy, and performance.
</t>

<t>IPv6 hosts typically configure a number of IPv6 addresses of different properties. For example, a host may configure one stable and one temporary address per each autoconfiguration prefix advertised on the local network. Currently, the addresses 
to be configured typically depend on local system policy, with the aforementioned 
policy being static and irrespective of the network the host attaches to. This "one size fits all" approach limits the ability of systems and applications of fully-leveraging the increased flexibility and availability of IPv6 addresses.</t>

<t>Each application running on a given system may have its own set of requirements or expectations for the properties of the IPv6 addresses to be employed. For example, an application meaning to offer a public service might expect to employ global stable addresses for such purpose, while a privacy-sensible client application might prefer short-lived temporary addresses, or might even expect to employ single-use ("throw-away") IPv6 addresses when connecting to public servers. However, the subtetlies associated with IPv6 addresses (and associated properties) are often ignored by application programmers and, in any case, current APIs (such as the BSD Sockets API) tend to be very limited in the amount of control they give applications to select the most appropriate IPv6 addresses for a given task, thus limiting a programmer's ability to leverage IPv6 address availability and properties.</t>


<t>This document analyzes the impact of a number of properties of IPv6 addresses on areas such as security and privacy, and analyzes how IPv6 addresses are curently generated and employed by different operating systems and applications. Finally, it provides a problem statement by identifying and analyzing gaps that prevent systems and applications from fully-leveraging IPv6 addressing capabilities, setting the basis for new work that could fill those gaps.</t>
</section>


<section title="Terminology" anchor="terminology">

<t>This document employs the definitions of "public address", "stable address", and "temporary address" from Section 2 of <xref target="RFC7721"/>.</t>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
   NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   RFC 2119 <xref target="RFC2119"/>.</t>
</section>


<section title="Background" anchor="predictability-considerations">
<t>Predictable IPv6 addresses result in a number of security and privacy implications. 
For example, <xref target="Barnes2012"/> discusses how patterns in network prefixes 
can be leveraged for IPv6 address scanning. On the other hand, <xref target="RFC7707"/>, 
<xref target="RFC7721"/> and <xref target="RFC7217"/> discuss the security and privacy 
implications of predictable IPv6 Interface Identifiers (IIDs).</t>

<t>
Given the aforementioned previous work in this area, and the formal specification update 
produced by <xref target="RFC8064"/>, we expect (and assume in the rest of this document) 
that implementations have replaced any schemes that produce predictable addresses with 
alternative schemes that avoid such patterns (e.g., RFC7217 in replacement of the 
traditional SLAAC addresses that embed link-layer addresses). </t>
</section>

<section title="IPv6 Address Properties" anchor="address-considerations">

<t>There are three parameters that affect the security and privacy properties of an IPv6 address:

<list style="symbols">
<t>Scope</t>
<t>Stability</t>
<t>Usage type (client-like "outgoing connections" vs. server-like "incoming connections")</t>
</list>
</t>

<t>
<xref target="scope-considerations"/>, 
<xref target="stability-considerations"/>, and <xref target="usage-type-considerations"/> 
discuss the security and privacy implications (and associated tradeoffs) of the scope, 
stability and usage type properties of IPv6 addresses, respectively.
</t>


<section title="Address Scope Considerations" anchor="scope-considerations">
<t>
The IPv6 address scope can, in some scenarios, limit the attack exposure of a node as a result 
of the implicit isolation provided by a non-global address scope. For example, a node that 
only employs link-local addresses may, in principle, only be exposed to attack from other 
nodes in the local link. Hosts employing only Unique Local Addresses (ULAs) may be more 
isolated from attack than those employing Global Unicast Addresses (GUAs), assuming that 
proper packet filtering is enforced at the network edge.
</t>

<t>The potential protection provided by a non-global addresses should not be regarded as a 
complete security strategy, but rather as a form of "prophylactic" security 
(see <xref target="I-D.gont-opsawg-firewalls-analysis"/>).
</t>

<t>We note that the use of non-global addresses is usually limited to a reduced type of 
applications/protocols that e.g. are only meant to operate on a reduced scope, and hence 
their applicability may be limited.</t>

<t>A discussion of ULA usage considerations can be found in 
<xref target="I-D.ietf-v6ops-ula-usage-considerations"/>.</t>
</section>

<section title="Address Stability Considerations" anchor="stability-considerations">
<t>The stability of an address has two associated security/privacy implications:
<list style="symbols">
<t>Ability of an attacker to correlate network activity</t>
<t>Exposure to attack</t>
</list>

</t>

<t>
For obvious reasons, an address that is employed for multiple communication instances 
allows the aforementioned network activities to be correlated. The longer an address 
is employed (i.e., the more stable it is), the longer such correlation will be possible. 
In the worst-case scenario, a stable address that is employed for multiple communication 
instances over time will allow all such activities to be correlated. On the other hand, 
if a host were to generate (and eventually "throw away") one new address for each 
communication instance (e.g., TCP connection), network activity correlation would be mitigated. 

<list style="hanging">
<t hangText="NOTE:"><vspace blankLines="0"/>The use of constant IIDs (as in traditional SLAAC) result in addresses that, while 
not constant as a whole (since the prefix changes), contain a globally-unique value that 
leaks out the node "identity". Such addresses result in the worst possible security and 
privacy implications, and their use has been deprecated by <xref target="RFC8064"/>.
</t>
</list>
</t>


<t>Typically, when it comes to attack exposure, the longer an address is employed the longer 
an attacker is exposed to attacks (e.g. an attacker has more time to find the address in the 
first place <xref target="RFC7707"/>). While such exposure is traditionally associated with 
the stability of the address, the usage type of the address 
(see <xref target="usage-type-considerations"/>) may also have an impact on attack exposure.
</t>


<t>A popular approach to mitigate network activity correlation is the use of "temporary 
addresses" <xref target="RFC4941"/>. Temporary addresses are typically configured and 
employed along with stable addresses, with the temporary addresses employed for outgoing 
communications, and the stable addresses employed for incoming communications.
<list style="hanging">
<t hangText="NOTE:"><vspace blankLines="0"/>Ongoing work <xref target="I-D.gont-6man-non-stable-iids"/> aims at updating 
<xref target="RFC4941"/> such that temporary addresses can be employed without the 
need to configure stable addresses.</t>
</list>

We note that the extent to which temporary addresses provide improved mitigation of 
network activity correlation and/or reduced attack exposure may be questionable 
and/or limited in some scenarios. For example, a temporary address that is reachable 
for, say, a few hours has a questionable "reduced exposure" (particularly when 
automated attack tools do not typically require such a long period of time to 
complete their task). Similarly, if network activity can be correlated for the 
life of such address (e.g., on the order of several hours), such period of time might 
be long enough for the attacker to correlate all the network activity he is meaning 
to correlate.
</t>
<!--
Temporary addresses (as opposed to stable addresses) may limit the exposure of an 
address to attack, and may help to mitigate network activity correlation. We note 
that the extent to which temporary addresses provide improved mitigation of network 
activity correlation and/or reduced attack exposure may be questionable in a number 
of scenarios. For example, a temporary address that is reachable for, say, a few 
hours has a questionable "reduced exposure" (particularly when automated attack 
tools do not typically require such a long period of time to complete their task). 
Similarly, if network activity can be correlated for the life of such address 
(e.g., in the order of several hours), there are scenarios in which such period of 
time would be long enough for an attacker to correlate all the network activity he 
is meaning to correlate.-->


<t>
In order to better mitigate network activity correlation and/or possibly reduce host 
exposure, an implementation might want to either reduce the preferred lifetime of a 
temporary address, or even better, generate one new temporary address for each new 
transport protocol instance. However, the associated lifetime/stability of an address 
may have a negative impact on the network. For example, if a node were to employ 
"throw away" IPv6 addresses, or employ temporary addresses <xref target="RFC4941"/> 
with a short preferred lifetime, local nodes might need to maintain too many entries 
in their Neighbor Cache, and a number of devices (possibly enforcing security policies) 
might also need to cope with such additional state.
</t>

<t>Additionally, enforcing a maximum lifetime on IPv6 addresses may cause long-lived 
TCP connections to fail. For example, an address becoming "Invalid" (after transitioning 
through the "Preferred" and "Deprecated" states) would cause the TCP connections 
employing them to break. This, in turn, would cause e.g. long-lived SSH sessions to break/fail.
</t>

<t>
In some scenarios, attack exposure may be reduced by limiting the usage of temporary 
addresses to outgoing connections, and prevent such addresses from being used for 
incoming connections (please see <xref target="usage-type-considerations"/>).
</t>
</section>


<section title="Usage Type Considerations" anchor="usage-type-considerations">

<t>
A node that employs one of its addresses to communicate with an external server 
(i.e., to perform an "outgoing connection") may cause such address to become exposed 
to attack. For example, once the external server receives an incoming connection, 
the corresponding server might launch an attack against the aforementioned address. 
A real-world instance of this type of scenario has been documented in <xref target="Hein"/>.
</t>

<t>
However, we note that employing an IPv6 address for outgoing communications need 
not increase the exposure of local services to other parties. For example, nodes 
could employ temporary addresses only for outgoing connections, but not for incoming 
connections. Thus, external nodes that learn about client's addresses could not really 
leverage such addresses for actively contacting the clients.
</t>

<t>There are multiple ways in which this could possibly be achieved, with different 
implications. Namely:
<list style="symbols">
<t>Run a host-based or network-based firewall</t>
<t>Bind services to specific (explicit) addresses</t>
<t>Bind services only to stable addresses</t>
</list>
</t>

<t>
A client could simply run a host-based firewall that only allows incoming connections 
on the stable addresses. This is clearly more of an operational way of achieving the 
desired functionality, and may require good firewall/host integration (e.g., the firewall 
should be able to tell stable vs. temporary addresses), may require the client to run 
additional firewall software for this specific purpose, etc. In other scenarios, a 
network-based firewall could be configured to allow outgoing communications from all 
internal addresses, but only allow incoming communications to stable addresses. For 
obvious reasons, this is generally only applicable to networks where incoming communications 
are allowed to a limited number of hosts/servers.
</t>

<t>Services could be bound to specific (explicit) addresses, rather than to all 
locally-configured addresses. However, there are a number of short-comings associated 
with this approach. Firstly, an application would need to be able to learn all of its 
addresses and associated stability properties, something that tends to be non-trivial 
and non-portable, and that also makes applications protocol-dependent, unnecessarily. 
Secondly, the BSD Sockets API does not really allow a socket to be bound to a subset of 
the node's addresses. That is, sockets can be bound to a single address or to all 
available addresses (wildcard), but not to a subset of all the configured addresses.
</t>

<t>Binding services only to stable addresses provides a clean separation between addresses 
employed for client-like outgoing connections and server-like incoming connections. 
However, we currently lack an appropriate API for nodes to be able to specify that a 
socket should only be bound to stable addresses. <!--Development of such an API should be 
considered for future work.-->
</t>

</section>
</section> <!-- address considerations -->


<section title="Default Address Selection in IPv6" anchor="default-address-selection">
<t>
Applications use system API's to select the IPv6 addresses that will be used
for incoming and outgoing connections. These choices have consequences in terms
of privacy, security, stability and performance.
</t>
<t>
Default Address Selection for IPv6 is specified in <xref target="RFC6724" />. The
selection starts with a set of potential destination addresses, such as 
returned by getaddrinfo(), and the set of potential source addresses currently
configured for the selected interfaces. For each potential destination address,
the algorithm will select the source address that provides the best route to the 
destination, while choosing the appropriate scope and preferring temporary addresses.
The algorithm will then select the destination address, while giving a preference to
reachable addresses with the smallest scope. The selection may be affected by system
settings. We note that <xref target="RFC6724" /> only applies for outgoing connections, such
as those made by clients trying to use services offered by other hosts.</t>

<t>We note that <xref target="RFC6724"/> selects IPv6 addresses from all the currently available addresses on the host, and there is currently no way for an application to indicate expected or desirable properties for the IPv6 source addresses employed for such outgoing communications. For example, a privacy-sensitive application might want that each outgoing communication instance employs a new, single-use IPv6 address, or to employ a new reusable address that is not employed or reusable by any other application on the host. Reuse of an IPv6 address by an application would allow the correlation of all network activities corresponding to such application as being performed by the same host, while reuse of an IPv6 address by multiple different applications would allow the correlation of all such network activities as being performed by the host with such IPv6 address.</t>


<t>
When devices provide a service, the
common pattern is to just wait for connections over all addresses configured on the 
device. For example, applications using the BSD Sockets API will commonly bind() the listening 
socket to the undefined address. This long-established behavior is appropriate
for devices providing public services, but may have unexpected results for devices
providing semi-private services, such as various forms of peer-to-peer or local-only
applications.
</t> 
<t>
This behavior leads to three problems: device tracking, discussed in 
<xref target="deviceTracking"/>; unexpected address discovery, discussed in
<xref target="unexpectedDisco"/>; and availability outside the expected scope,
discussed in <xref target="availableOutside"/>. These problems are caused in part
by the limitations of available address selection API, presented in <xref target="limitedApi"/>.
</t>

</section> <!-- default address selection -->



<section title="Current Possible Approaches for IPv6 Address Usage" anchor="approaches">


<section title="Incoming communications" anchor="approach-incoming">
<t>There are a number of ways in which a system or network may affect which address (and how) may be employed for different services and cases. Namely,

<list style="symbols">
<t>TCP/IP stack address filtering</t>
<t>Application-based address filtering</t>
<t>Firewall-based address filtering</t>
</list>
</t>

<t>Clearly, the most elegant approach for address selection is for applications to be able to specify the properties of the addresses they are 
willing to employ by means of an API, such the TCP/IP stack itself can "filter" which addresses are allowed to be employed for the given service/application. This relieves the application from dealing with low level details of networking, improves portability, and avoids duplicate code in applications. However, constraints in the current APIs (see <xref target="limitedApi"/>) may limit the ability of application progremmers for leveraging this technique.</t>

<t>Another possible approach is for applications to e.g. bind services to all available addresses, and perform the associated selection/filtering at the application level. While possible this has a number of drawbacks. Firstly, it would require applications to deal with low-level networking details, require that all the associated code be duplicated in all applications, and also negatively affect portability. Besides, performing address/selection filtering at the application level may not mitigate some possible threats. For example, port scanning will still be possible, since the aforementioned filtering will only be performed e.g. once UDP packets are received or TCP connections are established.
</t>
<t>Finally, a firewall may be employed to filter addresses based on their intended usage. For example, a firewall may block incoming requests to all addresses except to some whitelisted addresses (such as the stable addresses of the node). This technique not only requires the use of a firewall (which may or may not be present), but also implies knowledge of the firewall regarding the desired properties of the addresses that each application/service is intended to use.
</t>
</section>

<section title="Outgoing communications" anchor="approach-outgoing">
<t>An application might be able to obtain the list of currently-configured addresses, and subsequently select an address with desired properties,  and explicitly "bind" the address to the socket, to override the default source address selection.</t>
<t>However, this approach is problematic for a number of reasons. Firstly, there is no portable way of obtaining the list of currently-configured addresses on the local node, and even less to check for properties such "valid lifetime". Secondly, as discussed in <xref target="approach-incoming"/>, it would require application programmers to understand all the subtetiles associated with IPv6 addressing, and would also lead to duplicate code on all applications. Finally, applications would be limited to use already-configured addresses and unable to  trigger the generation of new addresses where desirable (e.g. the genration of a new temporary address for this application instance or communication instance).</t>
</section>

</section> <!-- approaches -->


<section title="Problem Statement" anchor="problem-statement">

<t>This section elaborates the problem statement on IPv6 address usage. <xref target="issues"/> describes the security and privacy implications of improper IPv6 address usage, while <xref target="limitedApi"/>, <xref target="advice-usage"/>, <xref target="advice-configuration"/>, analyze the possible root of such improper address usage, suggesting possible future work.</t>

<section title="Issues Associated with Sub-optimal IPv6 Address Usage" anchor="issues">
<section title="Testing for the Presence of Node in the Network"  anchor="deviceTracking">
<!-- [fgont] 'Device tracking' is not the right term here... but still havent been able to come up with something better -->

<t>
The stable addresses recommended in <xref target="RFC8064" /> use stable IIDs defined
in <xref target="RFC7217" />. One key part of that algorithm is that if a device
connects to a given network at different times, it will always configure the
same IPv6 addresses on that network. If the device hosts a service ready to 
accept connections on that stable address, adversaries can test the presence of the 
device on the network by attempting connections to that stable address. Stable addresses
used by listening services will thus enable testing whether a specific device is
returning to a particular network, which
in a number of cases might be considered a privacy issue.


</t> 
</section>
<section title="Unexpected Address Discovery" anchor="unexpectedDisco" >
<t>
Systems like DNS-Based Service Discovery <xref target="RFC6763" /> allow clients to 
discover services within a limited scope, that can be defined by a domain name. These
services are not advertised outside of that scope, and thus do not expect to be 
discovered by random parties on the Internet. However, such services
may be easily discoverable if they listen for connections to IPv6 addresses that 
a client process also uses as source address when connecting to remote servers.
<list style="hanging">
<t hangText="NOTE:"><vspace blankLines="0"/>
An example of such unexpected discovery is described in <xref target="Hein" />. A network 
manager observed scanning traffic directed at the temporary addresses of local devices.
The analysis in  <xref target="Hein" /> shows that the scanners learned the addresses by observing the device 
contact an NTP service (<xref target="RFC5905" />). The remote scanning was possible
because the local devices were also accepting connections directed to the temporary
addresses.
</t>
</list>
</t>
<t>
It is obvious from the example that the "attack surface" of the services is increased 
because they are bond to the same IPv6 addresses that are also used by clients for outgoing communications with remote systems. But the overlap between "client" and "server" addresses is only one part of
the problem. Suppose that a device hosts both a video game and a home automation 
application. The video game users will be able to discover the IPv6 address of the
game server. If the home automation server listens to the same IPv6 addresses, it 
is now exposed to connection attempts by all these users. That, too, increases the
attack surface of the home automation server.
</t>
</section>

<section title="Availability Outside the Expected Scope"  anchor="availableOutside">
<t>
The IPv6 addressing architecture <xref target='RFC4291' /> defines multiple address 
scopes. In practice, devices are often configured with globally reachable 
unicast addresses,
link local addresses, and Unique Local IPv6 Unicast Addresses (ULA) 
<xref target="RFC4193" />. Availability outside the expected scope happens when 
a service is expected to be only available in some local scope, but inadvertently becomes
available to remote parties. That could happen for example if a service is meant
to be available only on a given link, but becomes reachable through ULA or through
globally reachable addresses, or if a service is meant to be available only inside
some organization's perimeter and becomes reachable through
globally reachable addresses. It will happen in particular if a service intended for
some local scope is programmed to bind to "unspecified" addresses, which in 
practice means every address configured for the device (please see <xref target="limitedApi"/>).
</t>
</section>
</section> <!-- issues with... -->



<section title="Current Limitations in the Address Selection APIs" anchor="limitedApi" >
<t>
Application developers using the BSD Sockets API can "bind" a listening socket to a specific
address, and ensure that the application is only reachable through that address. In
theory, careful selection of the binding address could mitigate the problems described in <xref target="issues"/>. Binding services to temporary addresses could mitigate the ability of an attacker from testing for the presence of the node in the network.
Binding different services to different addresses could mitigate unexpected discovery.
Binding services to link local addresses or ULA could mitigate availability outside the
expected scope. However,
explicitly managing addresses adds significant complexity to the application development.
It requires that application developers master addressing architecture subtleties, and 
implement logic that reacts adequately to connectivity events and address changes. 
Experience shows that application developers would probably prefer some much simpler solution.
</t>
<t>
In addition, we should note that many application developers use high level APIs that
listen to TLS, HTTP, or some other application protocol. These high level APIs seldom
provide detailed access to specific IP addresses, and typically default to listening
to all available addresses.
</t>

<t>A more advanced API could allow an application programmer to select desired properties in an address (scope, lifespan, etc.), such that the best-suitable addresses are selected, while relieving the application for low-level IPv6 addressing details. Such API might also trigger the generation of new IPv6 addresses when the specified properties would require so.</t>

</section> <!-- limited api -->

<section title="Sub-optimal IPv6 Address Configuration" anchor="advice-configuration">
<t>Most operating systems configure the same types of addresses regardless of the current "operating mode" or "profile" of the device (e.g., device connected to enterprise network vs roaming across untrusted networks). For example, many operating systems configure both stable <xref target="RFC8064"/> and temporary <xref target="RFC4941"/> addresses on all network interfaces. However, this "one size fits all" approach tends to be sub-optimal or inappropriate for some scenarios. For example, enterprise networks typically prefer usage of only stable address, thus meaning that a network administator needs to find the means for disabling the generation of temporary addresses on all those systems that would otherwise generate them. On the other hand, some mobile devices configure both stable and temporary addresses, even when their usage pattern (client-like operation, as opposed to offering services to other nodes) would allow for the more privacy-sensible option of configuring only temporary addresses.
</t>

<t>The lack of better tuned address configuration policies has helped the "one size fits all" approach that, as noted, may lead to suboptimal results. Advice in this area might help achieve more optional address generation policies such that IPv6 addressing capabilities are fully leveraged.</t>

<t>
<list style="hanging">
<t hangText="NOTE:"><vspace blankLines="0"/>
One might envision a document that provides advice regarding the address generation for different typical scenarios (e.g., when to configure stable-only, temporary-only, or stable+temporary). In the most simple analysis, one might expect nodes in a typical enterprise network to employ only stable addresses. General-purpose nodes in a home or "trusted" network may want to employ both stable and temporary addresses. Finally, mobile nodes (e.g. when roaming across non-trusted networks) may want to employ only temporary addresses).
</t>
</list>
</t>
</section>


<section title="Sub-optimal IPv6 Address Usage" anchor="advice-usage">
<t>An application programmer, left with the question of which are the most appropriate addresses for a given usage type and application, typically resorts to the Default IPv6 Address Selection for IPv6 (see <xref target="default-address-selection"/>) for outgoing communications, and to accepting incoming communications on all available addresses for incoming communications. As discussed throughout this document, this leads to sub-optimal results. Besides, all applications on a node share the same pool of configured addresses, and applications are also prevented from triggering the generation of new addresses (e.g. to be employed for a particular application or communcation instance).</t>

<t>Guidance in this area is warranted such that applications and systems fully-leverage IPv6 addressing.</t>


<t>
<list style="hanging">
<t hangText="NOTE:"><vspace blankLines="0"/>
Such guidance would elaborate, among other things, on the usage of IPv6 addresses when offering network services and when performing client-like communications. For example, for incomming communications, hosts might want to employ only the smallest-scope applicable addresses (if available) and, if stable addresses are available, they might want to accept incoming connections only on such addresses (but *not* on temporary addresses). For client-like communications, hosts might prefer temporary addresses, unless the coresponding communication instances are expected to be long-lived (e.g., SSH sessions).</t>
</list>
</t>
</section>


</section>



	<section title="IANA Considerations" anchor="iana-considerations">
<t>There are no IANA registries within this document. The RFC-Editor can remove this section before publication of this document as an RFC.</t>
</section>

    <section title="Security Considerations">
<t>The security and privacy implications associated with the predictability and lifetime of IPv6 addresses has been analyzed in <xref target="RFC7217"/> <xref target="RFC7721"/>, and <xref target="RFC7707"/>. This document complements and extends the aforementioned analysis by considering other IPv6 properties such as the address scope and address usage type, and the associated tradeoffs. Finally, it describes possible future standards-track work to allow for greater flexibility in IPv6 address usage.</t>

    </section>

    <section title="Acknowledgements">
<t>The authors would like to thank (in alphabetical order) Francis Dupont, Tatuya Jinmei, and Dave Thaler for providing valuable comments on earlier versions of this document.</t>


</section>


  </middle>

  <back>
  <references title='Normative References'>
<!--
	<?rfc include="reference.RFC.2460" ?>
-->
	<?rfc include="reference.RFC.2119" ?>
	<?rfc include="reference.RFC.4193" ?>
	<?rfc include="reference.RFC.4291" ?>
	<?rfc include="reference.RFC.4941" ?>
	<?rfc include="reference.RFC.5905" ?>
	<?rfc include="reference.RFC.6724" ?>
	<?rfc include="reference.RFC.6763" ?>
	<?rfc include="reference.RFC.7217" ?>
	<?rfc include="reference.RFC.8064" ?>

  </references>

  <references title='Informative References'>
	<?rfc include="reference.RFC.7707" ?>
	<?rfc include="reference.RFC.7721" ?>
	<?rfc include="reference.I-D.ietf-v6ops-ula-usage-considerations" ?>

	<?rfc include="reference.I-D.gont-6man-non-stable-iids" ?>

	<?rfc include="reference.I-D.gont-opsawg-firewalls-analysis" ?>




      <reference anchor="Barnes2012" target="https://www.caida.org/workshops/isma/1202/slides/aims1202_rbarnes.pdf">
        <front>
          <title>Mapping the Great Void Smarter scanning for IPv6</title>

          <author fullname="Richard Barnes" initials="R." surname="Barnes">
          </author>


          <author fullname="Rick Altmann" initials="R." surname="Altmann">
          </author>



          <author fullname="Daniel Kerr" initials="D." surname="Kerr">
          </author>


          <date/>
        </front>

        <seriesInfo name=""
                    value="ISMA 2012 AIMS-4 - Workshop on Active Internet Measurements, February 2012"/>
      </reference>


      <reference anchor="Hein" target="http://netpatterns.blogspot.be/2016/01/the-rising-sophistication-of-network.html">
        <front>
          <title>The Rising Sophistication of Network Scanning</title>

          <author fullname="Brad Hein" initials="B." surname="Hein">
          </author>

          <date/>
        </front>

        <seriesInfo name=""
                    value="January 2016"/>
      </reference>

</references>

  </back>

</rfc>
